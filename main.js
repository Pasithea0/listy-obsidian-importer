/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var A=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var Q=Object.prototype.hasOwnProperty;var Z=(n,t)=>{for(var s in t)A(n,s,{get:t[s],enumerable:!0})},tt=(n,t,s,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of q(t))!Q.call(n,i)&&i!==s&&A(n,i,{get:()=>t[i],enumerable:!(e=W(t,i))||e.enumerable});return n};var et=n=>tt(A({},"__esModule",{value:!0}),n);var rt={};Z(rt,{default:()=>N});module.exports=et(rt);var G=require("obsidian");var h=require("obsidian");var V=require("obsidian");var B=require("obsidian"),st=(n,t)=>(n%t+t)%t,F=class{constructor(t,s,e){this.values=[];this.suggestions=[];this.owner=t,this.containerEl=s,s.on("click",".suggestion-item",this.onSuggestionClick.bind(this)),s.on("mousemove",".suggestion-item",this.onSuggestionMouseover.bind(this)),e.register([],"ArrowUp",i=>!i.isComposing&&this.selectedItem!==void 0?(this.setSelectedItem(this.selectedItem-1,!0),!1):!0),e.register([],"ArrowDown",i=>!i.isComposing&&this.selectedItem!==void 0?(this.setSelectedItem(this.selectedItem+1,!0),!1):!0),e.register([],"Enter",i=>!i.isComposing&&this.selectedItem!==void 0?(this.useSelectedItem(i),!1):!0)}onSuggestionClick(t,s){t.preventDefault();let e=this.suggestions.indexOf(s);this.setSelectedItem(e,!1),this.useSelectedItem(t)}onSuggestionMouseover(t,s){let e=this.suggestions.indexOf(s);this.setSelectedItem(e,!1)}setSuggestions(t){this.containerEl.empty();let s=[];t.forEach(e=>{let i=this.containerEl.createDiv("suggestion-item");this.owner.renderSuggestion(e,i),s.push(i)}),this.values=t,this.suggestions=s,this.setSelectedItem(0,!1)}useSelectedItem(t){if(this.selectedItem===void 0)return;let s=this.values[this.selectedItem];s&&this.owner.selectSuggestion(s,t)}setSelectedItem(t,s){var o;let e=st(t,this.suggestions.length);this.selectedItem!==void 0&&((o=this.suggestions[this.selectedItem])==null||o.removeClass("is-selected"));let i=this.suggestions[e];i==null||i.addClass("is-selected"),this.selectedItem=e,s&&i.scrollIntoView(!1)}},E=class{constructor(t,s){this.app=t,this.inputEl=s,this.scope=new B.Scope,this.suggestEl=createDiv("suggestion-container");let e=this.suggestEl.createDiv("suggestion");this.suggest=new F(this,e,this.scope),this.scope.register([],"Escape",this.close.bind(this)),this.inputEl.addEventListener("input",this.onInputChanged.bind(this)),this.inputEl.addEventListener("focus",this.onInputChanged.bind(this)),this.inputEl.addEventListener("blur",this.close.bind(this)),this.suggestEl.on("mousedown",".suggestion-container",i=>{i.preventDefault()})}onInputChanged(){let t=this.inputEl.value,s=this.getSuggestions(t);if(!s){this.close();return}s.length>0?(this.suggest.setSuggestions(s),this.open(this.app.dom.appContainerEl,this.inputEl)):this.close()}open(t,s){this.app.keymap.pushScope(this.scope),t.appendChild(this.suggestEl),this.suggestEl.style.position="absolute";let e=s.getBoundingClientRect();this.suggestEl.style.left=`${e.left}px`,this.suggestEl.style.top=`${e.bottom}px`,this.suggestEl.style.width=`${e.width}px`}close(){this.app.keymap.popScope(this.scope),this.suggest.setSuggestions([]),this.suggestEl.detach()}};var S=class extends E{constructor(t,s){super(t,s)}getSuggestions(t){let s=this.app.vault.getAllLoadedFiles(),e=[],i=t.toLowerCase();return s.forEach(o=>{o instanceof V.TFolder&&o.path.toLowerCase().contains(i)&&e.push(o)}),e}renderSuggestion(t,s){s.setText(t.path)}selectSuggestion(t){this.inputEl.value=t.path,this.inputEl.trigger("input"),this.close()}};var _=require("obsidian");var I=class extends E{constructor(t,s){super(t,s)}getSuggestions(t){let s=this.app.vault.getAllLoadedFiles(),e=[],i=t.toLowerCase();return s.forEach(o=>{o instanceof _.TFile&&o.extension==="md"&&o.path.toLowerCase().contains(i)&&e.push(o)}),e}renderSuggestion(t,s){s.setText(t.path)}selectSuggestion(t){this.inputEl.value=t.path,this.inputEl.trigger("input"),this.close()}};var Y={mySetting:"default",outputFolder:"Listy",consolidateToDoLists:!0,includeTags:!1,escapeDescriptionTags:!0,enableNoteLocking:!1,templateFile:""},w=class extends h.PluginSettingTab{constructor(s,e){super(s,e);this.plugin=e}display(){let{containerEl:s}=this;s.empty(),s.createEl("h2",{text:this.plugin.manifest.name}),this.addOutputFolderSetting(),this.addConsolidateToDoListsSetting(),this.addIncludeTagsSetting(),this.addEscapeDescriptionTagsSetting(),this.addEnableNoteLockingSetting(),this.addTemplateFileSetting()}addOutputFolderSetting(){new h.Setting(this.containerEl).setName("Output folder").setDesc("Where to save your imported notes").addSearch(s=>{new S(this.app,s.inputEl),s.setPlaceholder("Example: folder1/folder2").setValue(this.plugin.settings.outputFolder).onChange(e=>{this.plugin.settings.outputFolder=e,this.plugin.saveSettings()})})}addConsolidateToDoListsSetting(){new h.Setting(this.containerEl).setName("Consolidate To Do lists").setDesc("Create a single note for To Do lists instead of individual notes for each item").addToggle(s=>{s.setValue(this.plugin.settings.consolidateToDoLists).onChange(async e=>{this.plugin.settings.consolidateToDoLists=e,await this.plugin.saveSettings()})})}addIncludeTagsSetting(){new h.Setting(this.containerEl).setName("Include tags").setDesc("Convert listy tags to Obsidian tags in the frontmatter").addToggle(s=>{s.setValue(this.plugin.settings.includeTags).onChange(async e=>{this.plugin.settings.includeTags=e,await this.plugin.saveSettings()})})}addEscapeDescriptionTagsSetting(){new h.Setting(this.containerEl).setName("Escape hashtags in descriptions").setDesc("Prevent hashtags in descriptions from becoming Obsidian tags").addToggle(s=>{s.setValue(this.plugin.settings.escapeDescriptionTags).onChange(async e=>{this.plugin.settings.escapeDescriptionTags=e,await this.plugin.saveSettings()})})}addEnableNoteLockingSetting(){new h.Setting(this.containerEl).setName("Enable note locking").setDesc('When enabled, adds a "lock" property to notes. Locked notes will be skipped during reimport.').addToggle(s=>{s.setValue(this.plugin.settings.enableNoteLocking).onChange(async e=>{this.plugin.settings.enableNoteLocking=e,await this.plugin.saveSettings()})})}addTemplateFileSetting(){new h.Setting(this.containerEl).setName("Template file").setDesc("Choose a markdown file to use as a template for new notes. Leave empty to use the default template.").addSearch(s=>{new I(this.app,s.inputEl),s.setPlaceholder("Example: templates/listy-template.md").setValue(this.plugin.settings.templateFile).onChange(e=>{this.plugin.settings.templateFile=e,this.plugin.saveSettings()})})}};var m=require("obsidian");var D=require("obsidian");var g=[];for(let n=0;n<256;++n)g.push((n+256).toString(16).slice(1));function z(n,t=0){return(g[n[t+0]]+g[n[t+1]]+g[n[t+2]]+g[n[t+3]]+"-"+g[n[t+4]]+g[n[t+5]]+"-"+g[n[t+6]]+g[n[t+7]]+"-"+g[n[t+8]]+g[n[t+9]]+"-"+g[n[t+10]]+g[n[t+11]]+g[n[t+12]]+g[n[t+13]]+g[n[t+14]]+g[n[t+15]]).toLowerCase()}var $,it=new Uint8Array(16);function M(){if(!$){if(typeof crypto=="undefined"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");$=crypto.getRandomValues.bind(crypto)}return $(it)}var nt=typeof crypto!="undefined"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),R={randomUUID:nt};function ot(n,t,s){var i,o,r;if(R.randomUUID&&!t&&!n)return R.randomUUID();n=n||{};let e=(r=(o=n.random)!=null?o:(i=n.rng)==null?void 0:i.call(n))!=null?r:M();if(e.length<16)throw new Error("Random bytes length must be >= 16");if(e[6]=e[6]&15|64,e[8]=e[8]&63|128,t){if(s=s||0,s<0||s+16>t.length)throw new RangeError(`UUID byte range ${s}:${s+15} is out of buffer bounds`);for(let a=0;a<16;++a)t[s+a]=e[a];return t}return z(e)}var C=ot;var b=require("obsidian"),U=`# {{Title}}

[Visit Original Source]({{URL}})

## Description

{{Description}}

![Cover Image]({{Cover}})]

## Notes

{{UserNote}}`;async function J(n,t){if(!t||t.trim()==="")return U;let s=(0,b.normalizePath)(t);try{let e=n.metadataCache.getFirstLinkpathDest(s,"");return e?await n.vault.cachedRead(e):U}catch(e){return console.error(`Failed to read the Listy template '${s}'`,e),new b.Notice("Failed to read the Listy template file"),U}}function X(n,t,s){let e=n.replace(/{{Title}}/gi,t.title).replace(/{{URL}}/gi,t.url||"").replace(/{{Type}}/gi,t.type).replace(/{{DateAdded}}/gi,t.dateAdded).replace(/{{ListTitle}}/gi,s.title).replace(/{{ListType}}/gi,s.type).replace(/{{Create}}/gi,s.create).replace(/{{Update}}/gi,s.update);if(t.attributes&&t.attributes.length>0){let i=t.attributes.find(c=>c.key.toUpperCase()==="DESCRIPTION");e=e.replace(/{{Description}}/gi,i?i.value:"");let o=t.attributes.find(c=>c.key.toUpperCase()==="COVER");e=e.replace(/{{Cover}}/gi,o?o.value:"");let r=t.attributes.find(c=>c.key.toUpperCase()==="USER_NOTE");e=e.replace(/{{UserNote}}/gi,r?r.value:"");let a=t.attributes.find(c=>c.key.toUpperCase()==="AUTHOR");e=e.replace(/{{Author}}/gi,a?a.value:"");let l=t.attributes.find(c=>c.key.toUpperCase()==="GENRE");e=e.replace(/{{Genre}}/gi,l?l.value:"");let p=t.attributes.find(c=>c.key.toUpperCase()==="RATING");e=e.replace(/{{Rating}}/gi,p?p.value:"");let u=t.attributes.find(c=>c.key.toUpperCase()==="DATE");e=e.replace(/{{Date}}/gi,u?u.value:"");let d=t.attributes.find(c=>c.key.toUpperCase()==="PRICE");e=e.replace(/{{Price}}/gi,d?d.value:"");let f=/{{ATTR:([\w_]+)}}/gi,T;for(;(T=f.exec(e))!==null;){let c=T[1].toUpperCase(),v=t.attributes.find(O=>O.key.toUpperCase()===c);e=e.replace(new RegExp(`{{ATTR:${T[1]}}}`,"gi"),v?v.value:"")}}else e=e.replace(/{{Description}}/gi,"").replace(/{{Cover}}/gi,"").replace(/{{UserNote}}/gi,"").replace(/{{Author}}/gi,"").replace(/{{Genre}}/gi,"").replace(/{{Rating}}/gi,"").replace(/{{Date}}/gi,"").replace(/{{Price}}/gi,""),e=e.replace(/{{ATTR:[\w_]+}}/gi,"");return e.trim()}var x="%% Here you can type whatever you want, it will not be overwritten by the plugin. %%",k=class{constructor(t,s){this.app=t,this.settings=s}async processListyData(t){if(!t.lists||!Array.isArray(t.lists))throw new Error("Invalid Listy JSON format: missing lists array");this.settings.outputFolder&&this.settings.outputFolder.length>0&&(await this.app.vault.adapter.exists(this.settings.outputFolder)||await this.app.vault.createFolder(this.settings.outputFolder));let s=0;for(let e of t.lists){if(!e.items||e.items.length===0)continue;if(e.type==="Tasks"&&this.settings.consolidateToDoLists){await this.createConsolidatedToDoList(e,this.settings.outputFolder),s++;continue}let r=this.sanitizeFileName(e.title),a=(0,D.normalizePath)(`${this.settings.outputFolder}/${r}`);await this.app.vault.adapter.exists(a)||await this.app.vault.createFolder(a);for(let l of e.items){let p=this.sanitizeFileName(l.title),u=(0,D.normalizePath)(`${a}/${p}.md`),d=null;try{if(d=await this.app.vault.adapter.read(u),console.log(`Found existing note: ${p}`),this.settings.enableNoteLocking&&d&&d.match(/^lock:\s*true/m)){console.log(`Skipping locked note: ${p}`);continue}console.log(`Updating existing note: ${p}`)}catch(T){console.log(`Creating new note: ${p}`)}let f=await this.generateNoteContent(l,e,d);await this.app.vault.adapter.write(u,f),s++}}return s}async generateNoteContent(t,s,e){if(e){let l=this.extractItemId(e);if(l)return this.updateExistingNote(t,s,e,l)}let i=C(),o=this.generateFrontmatter(t,s),r=await this.generateItemContent(t,s),a=o;return a+=`%%START-${i}%%

`,a+=`${x}

`,a+=`%%START-EXTRACTED-CONTENT-${i}%%

`,a+=r,a+=`

%%END-EXTRACTED-CONTENT-${i}%%

`,a+=`${x}

`,a+=`%%END-${i}%%
`,a}extractItemId(t){let s=t.match(/%%START-([0-9a-f-]+)%%/);return s&&s[1]?s[1]:null}async updateExistingNote(t,s,e,i){let o=`%%START-${i}%%`,r=`%%END-${i}%%`,a=`%%START-EXTRACTED-CONTENT-${i}%%`,l=`%%END-EXTRACTED-CONTENT-${i}%%`;if(!e.includes(o)||!e.includes(r)||!e.includes(a)||!e.includes(l))return console.log("Markers not found or incomplete, regenerating note"),this.generateNoteContent(t,s,null);let p=this.generateFrontmatter(t,s),u=await this.generateItemContent(t,s),d=e.indexOf(a),f=e.indexOf(l);if(d===-1||f===-1)return console.log("Content markers not found, regenerating note"),this.generateNoteContent(t,s,null);let T=d+a.length,c=f,v=e.indexOf("---"),O=e.indexOf("---",v+3)+3,at="",lt="",H="",P="",j=e.indexOf(o),K=e.indexOf(r)+r.length;H=e.substring(j+o.length,d),P=e.substring(f+l.length,K-r.length);let L=p;return L+=o+H+a+`

`,L+=u,L+=`

`+l+P+r+`
`,L}processDescription(t){return this.settings.escapeDescriptionTags?t.replace(/#(\w+)/g,"`#$1`"):t}generateFrontmatter(t,s){let e=`---
`;if(e+=`source: listy
`,e+=`list: "${this.escapeYamlString(s.title)}"
`,e+=`dateAdded: ${t.dateAdded}
`,t.url&&(e+=`url: "${this.escapeYamlString(t.url)}"
`),e+=`type: ${t.type.toLowerCase()}
`,t.attributes&&t.attributes.length>0){let i=new Map;for(let o of t.attributes){let r=o.key.toLowerCase();i.set(r,o.value)}if(i.has("description")){let o=this.processDescription(i.get("description")||"");e+=`description: |
  ${o.replace(/\n/g,`
  `)}
`,i.delete("description")}if(i.has("author")&&(e+=`author: "${this.escapeYamlString(i.get("author")||"")}"
`,i.delete("author")),i.has("cover")&&(e+=`cover: "${this.escapeYamlString(i.get("cover")||"")}"
`,i.delete("cover")),i.has("tags")){if(this.settings.includeTags){let r=(i.get("tags")||"").split(",").map(a=>a.trim()).map(a=>a.replace(/\s+/g,"-")).filter(a=>a.length>0);if(r.length>0){e+=`tags:
`;for(let a of r)e+=`  - "${this.escapeYamlString(a)}"
`}}e+=`original_tags: "${this.escapeYamlString(i.get("tags")||"")}"
`,i.delete("tags")}i.has("icon")&&(e+=`icon: "${this.escapeYamlString(i.get("icon")||"")}"
`,i.delete("icon"));for(let[o,r]of i.entries())r.includes(`
`)||r.length>80?e+=`${o}: |
  ${r.replace(/\n/g,`
  `)}
`:e+=`${o}: "${this.escapeYamlString(r)}"
`}return e+=`marked: ${t.marked}
`,this.settings.enableNoteLocking&&(e+=`lock: false
`),e+=`---

`,e}async generateItemContent(t,s){let e=await J(this.app,this.settings.templateFile);if(t.attributes)for(let i of t.attributes)i.key.toLowerCase()==="description"&&(i.value=this.processDescription(i.value));return X(e,t,s)}escapeYamlString(t){return t.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\t/g,"\\t")}sanitizeFileName(t){let s=t.replace(/\//g,"-").replace(/\\/g,"-").replace(/:/g,"-").replace(/\*/g,"-").replace(/\?/g,"-").replace(/"/g,"'").replace(/</g,"-").replace(/>/g,"-").replace(/\|/g,"-").replace(/=/g,"-").replace(/\0/g,"").trim();return s.startsWith(".")&&(s="_"+s),s.length>200&&(s=s.substring(0,197)+"..."),s}async createConsolidatedToDoList(t,s){let e=(0,D.normalizePath)(`${s}/${this.sanitizeFileName(t.title)}.md`),i=null,o=new Map;try{if(i=await this.app.vault.adapter.read(e),this.settings.enableNoteLocking&&i&&i.match(/^lock:\s*true/m)){console.log(`Skipping locked To Do list: ${t.title}`);return}let l=/- \[([ x])\] (.*?)$/gm,p;for(;(p=l.exec(i))!==null;){let u=p[1]==="x",d=p[2];o.set(d,u)}console.log(`Updating existing To Do list: ${t.title}`)}catch(l){console.log(`Creating new To Do list: ${t.title}`)}let r=`---
`;r+=`source: listy
`,r+=`type: todo
`,r+=`list: "${this.escapeYamlString(t.title)}"
`,r+=`create: ${t.create}
`,r+=`update: ${t.update}
`,r+=`---

`,r+=`# ${t.title}

`;let a=i?this.extractItemId(i):C();r+=`%%START-${a}%%

`,r+=`${x}

`,r+=`%%START-EXTRACTED-CONTENT-${a}%%

`;for(let l of t.items){let p=l.marked||o.has(l.title)&&o.get(l.title);r+=`- [${p?"x":" "}] ${l.title}
`}r+=`
%%END-EXTRACTED-CONTENT-${a}%%

`,r+=`${x}

`,r+=`%%END-${a}%%
`,await this.app.vault.adapter.write(e,r)}};var y=class extends m.Modal{constructor(s,e){super(s);this.settings=e,this.fileContent=null,this.importService=new k(s,e)}async processJsonData(){if(!this.fileContent)throw new Error("No JSON file content available");try{let s=this.fileContent;return await this.importService.processListyData(s)}catch(s){throw console.error("Error processing JSON data:",s),s}}onOpen(){let{contentEl:s}=this,e=s.createEl("h2");e.textContent="Import Listy Lists";let i=s.createEl("p");i.innerHTML="Please select your <em>Listy export JSON file</em>",this.inputFileEl=s.createEl("input"),this.inputFileEl.type="file",this.inputFileEl.accept=".json",this.inputFileEl.addEventListener("change",o=>{var l,p;let r=(p=(l=o.target)==null?void 0:l.files)==null?void 0:p[0];if(!r){console.error("No file selected");return}let a=new FileReader;a.onload=()=>{try{this.fileContent=JSON.parse(a.result),this.goButtonEl.disabled=!1,this.goButtonEl.setAttr("style","background-color: green; color: black"),new m.Notice("Ready to import!")}catch(u){console.error("Error parsing JSON:",u),new m.Notice("Error parsing JSON file")}},a.onerror=u=>{console.error("FileReader error:",u),new m.Notice("Error reading file")},a.readAsText(r)}),this.goButtonEl=s.createEl("button"),this.goButtonEl.textContent="Import",this.goButtonEl.disabled=!0,this.goButtonEl.setAttr("style","background-color: red; color: white; margin-top: 15px;"),this.goButtonEl.addEventListener("click",()=>{new m.Notice("Importing lists..."),this.processJsonData().then(o=>{new m.Notice(`Successfully imported ${o} notes from Listy!`),this.close()}).catch(o=>{console.error(o),new m.Notice("Something went wrong... Check console for more details.")})}),s.appendChild(e),s.appendChild(i),s.appendChild(this.inputFileEl),s.appendChild(this.goButtonEl)}onClose(){let{contentEl:s}=this;s.empty()}};var N=class extends G.Plugin{async onload(){await this.loadSettings(),this.addRibbonIcon("list","Import Listy Lists",i=>{new y(this.app,this.settings).open()}).addClass("listy-importer-ribbon-class"),this.addStatusBarItem().setText("Listy Importer"),this.addCommand({id:"import-listy-lists",name:"Import Listy Lists",callback:()=>{new y(this.app,this.settings).open()}}),this.addSettingTab(new w(this.app,this)),this.registerInterval(window.setInterval(()=>console.log("setInterval"),5*60*1e3))}onunload(){}async loadSettings(){this.settings=Object.assign({},Y,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};
